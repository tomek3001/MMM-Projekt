package transmitancja;

import java.awt.Color;
import java.awt.Graphics;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jakub
 */


public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
       }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxAnimacja = new javax.swing.JCheckBox();
        a0Param = new javax.swing.JTextField();
        a1Param = new javax.swing.JTextField();
        b0Param = new javax.swing.JTextField();
        b1Param = new javax.swing.JTextField();
        b2Param = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        delay = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        frequency = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Sinus");
        jRadioButton1.setAutoscrolls(true);
        jRadioButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Trójkąt");
        jRadioButton2.setAutoscrolls(true);
        jRadioButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setText("Prostokąt");
        jRadioButton3.setAutoscrolls(true);
        jRadioButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        jButton1.setText("Generuj");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, java.awt.Color.lightGray));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jCheckBoxAnimacja.setText("Animacja");

        a0Param.setText("1");
        a0Param.setToolTipText("");
        a0Param.setName(""); // NOI18N
        a0Param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a0ParamActionPerformed(evt);
            }
        });

        a1Param.setText("1");
        a1Param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a1ParamActionPerformed(evt);
            }
        });

        b0Param.setText("1");

        b1Param.setText("1");
        b1Param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ParamActionPerformed(evt);
            }
        });

        b2Param.setText("1");
        b2Param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ParamActionPerformed(evt);
            }
        });

        jLabel2.setText("a0");

        jLabel3.setText("a1");

        jLabel4.setText("b0");

        jLabel5.setText("b1");

        jLabel6.setText("b2");

        delay.setText("0");

        jLabel7.setText("Opóźnienie");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("Pobudzenie");
        jRadioButton4.setAutoscrolls(true);
        jRadioButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButton4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton4StateChanged(evt);
            }
        });
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        frequency.setText("1000");

        jLabel8.setText("Częstotliwość");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delay, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frequency, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(a1Param, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b0Param, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b2Param, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b1Param, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(a0Param, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))))
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(285, 285, 285))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                        .addGap(297, 297, 297))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton3)
                                .addGap(33, 33, 33)
                                .addComponent(jCheckBoxAnimacja)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(469, 469, 469))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(a0Param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(a1Param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(b0Param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b1Param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(b2Param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(198, 198, 198)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(72, 72, 72)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jCheckBoxAnimacja))
                .addGap(21, 21, 21)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3});

        jPanel1.setOpaque(true);
        jPanel1.setBackground(Color.white);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    
     
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed

    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged

    }//GEN-LAST:event_jRadioButton1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //String[] parameters = new String[5];
        int polozenieY = 140;
        Animacja animuj = new Animacja();
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.white);        //zmiana koloru malowania na biały to zrobienia tła
        g.fillRect(2, 2, jPanel1.getWidth()-2, jPanel1.getHeight()-2);    //"czyszczenie", malowanie tła jak będzie czas to można to zrobic lepiej
        g.setColor(Color.black);        //przywrócenie pędzlowi czarnego koloru
        g.drawLine(20, jPanel1.getHeight()/4, jPanel1.getWidth(), jPanel1.getHeight()/4);  //rysowanie linii poziomej - osi x dla odpowiedzi
        g.drawString("0", 10, jPanel1.getHeight()/4+5);                                    //oraz oznaczenie "0"
        for (int i=1; i<((jPanel1.getWidth()-70)/102); i++)                                
        {                                                                                  //
        g.drawString("|", i*(10+102), jPanel1.getHeight()/4+4);                            //generowanie oznaczeń osi x      
        g.drawString(Integer.toString(i), i*(10+102)-2, jPanel1.getHeight()/4+19);         //      
        }
        g.drawString("0", 10, jPanel1.getHeight()/4+5);                                    //oraz oznaczenie "0"
        g.drawLine(20, 20, 20, jPanel1.getHeight()/2-30);                                     //rysowanie lini pionowej - osi y
        g.drawLine(20, jPanel1.getHeight()/2+polozenieY, jPanel1.getWidth(), jPanel1.getHeight()/2+polozenieY);  //rysowanie linii poziomej - osi x dla charakterystyk
        
         
        for (int i=1; i<8; i++)                                
        {                                                                                                          //
        g.drawString("|", 2*(i*30+9), jPanel1.getHeight()/2+ polozenieY + 4);                                                 //generowanie oznaczeń osi x      
        g.drawString(Double.toString(Math.pow(10, i-4)), 2*(i*30+9)-2, jPanel1.getHeight()/2 + polozenieY + 19);                           //      
        g.drawString("|", jPanel1.getWidth()/2+2*(i*30-1), jPanel1.getHeight()/2+polozenieY + 4);                                                 //generowanie oznaczeń osi x      
        g.drawString(Double.toString(Math.pow(10, i-4)), jPanel1.getWidth()/2+2*(i*30-1)-2, jPanel1.getHeight()/2 + polozenieY + 19);                           //      
        }
        g.drawString("▲", 14, jPanel1.getHeight()/2-25);                                                                             //rysowanie strzałki pionowej - osi y dla |G(jw)|
        g.drawString("►", jPanel1.getWidth()/2-9, jPanel1.getHeight()/2 + polozenieY + 6);                                   //rysowanie strzałki poziomej - osi x dla |G(jw)|
        g.drawString("f [rad/s]", jPanel1.getWidth()/2-45, jPanel1.getHeight()/2+polozenieY + 19);                          //rysowanie strzałki poziomej - osi x dla charakterystyk 
        g.drawString("▲", jPanel1.getWidth()/2-6, jPanel1.getHeight()/2 - 25);                                                        //rysowanie strzałki pionowej - osi y dla arg(G(jw))
        g.drawString("►", jPanel1.getWidth()-9, jPanel1.getHeight()/2+polozenieY + 6);                                   //rysowanie strzałki poziomej - osi x dla arg(G(jw))
        g.drawString("f [rad/s]", jPanel1.getWidth()-45, jPanel1.getHeight()/2+polozenieY + 19);                          //rysowanie strzałki poziomej - osi x dla charakterystyk 
        
        

        
        g.drawString("▲", 14, 30);                          //rysowanie strzałki poziomej - osi x dla odpowiedzi
        g.drawString("►", jPanel1.getWidth()-9, jPanel1.getHeight()/4+6);                          //rysowanie strzałki poziomej - osi x dla odpowiedzi
        g.drawString("czas [s]", jPanel1.getWidth()-45, jPanel1.getHeight()/4+19);                          //rysowanie strzałki poziomej - osi x dla charakterystyk 
        g.setColor(Color.LIGHT_GRAY);        // szary dla odróżnienia ramek od osi
        g.drawLine(20, jPanel1.getHeight()/2 - 30,20 ,jPanel1.getHeight()-30);
        g.drawLine(jPanel1.getWidth()/2, jPanel1.getHeight()/2-30,jPanel1.getWidth()/2 ,jPanel1.getHeight()-30);
        g.drawLine(20, jPanel1.getHeight()/2-30, jPanel1.getWidth(), jPanel1.getHeight()/2-30);  //rysowanie linii poziomej - osi x
        g.drawLine(20, jPanel1.getHeight()-30, jPanel1.getWidth(), jPanel1.getHeight()-30);  //rysowanie linii poziomej - osi x
        g.setColor(Color.black);        //przywrócenie pędzlowi czarnego koloru
        
        try{                                                //
        int temp = jPanel1.getWidth();              //oraz konwertowanie wartości długośći sygnału ze stringa na inta
        double freq = Double.parseDouble(frequency.getText());      //Pobranie częstotliwości
        int y1, y2;
            if (jRadioButton1.isSelected()){
                Sinus element = new Sinus(temp);
                element.generateSinus(freq);
                
                
                element.sinusTransformation(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                            Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()), 
                            Double.parseDouble(b2Param.getText()),Integer.parseInt(delay.getText()));
                
                        double y3;
                        y3 =   0.45 * jPanel1.getHeight() * (1/element.scaleToBiggest())/2 ;
                        int temp_os_y = (int)(element.scaleToBiggest() -((element.scaleToBiggest())%4));
                        g.setColor(Color.red);
                        for (int i=1; i<6; i++){
                            if(element.scaleToBiggest()<5){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)(Math.round(i*y3+1)));
                            g.drawString(Integer.toString(i), 4, (jPanel1.getHeight()/4) - (int)Math.round(i*y3-4));
                            }
                            if(element.scaleToBiggest()>=5 ){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)Math.round(i*y3*temp_os_y/4+1));
                            g.drawString(Integer.toString(i*(temp_os_y/4)), 24, (int)Math.round((jPanel1.getHeight()/4) - i*y3*temp_os_y/4 + 3)+2);
                            }
                        }
                        
                        g.setColor(new Color(0.3f, 0.7f, 0.2f));
                
                    for (int a=1; a <= temp - 1; a++){
                        y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a-1)*(1/element.scaleToBiggest())/4 );
                        y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a)*(1/element.scaleToBiggest())/4 );
                        g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                        if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
                    }
                   
                   
                    
                   for (int a=1; a <= temp - 1; a++){
                    
                       g.setColor(Color.BLUE);
                        y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/4);
                        y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/4 );
                        g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                        if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
                    }
                   
                   
                  element.sinusOmegaRe(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()));
                 element.sinusOmegaIm(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
               
                for (int a=1; a <= temp - 1; a++){
                    g.setColor(Color.RED);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/2 - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/2 - polozenieY);
                    g.drawLine((a-1 + 10)*2, (jPanel1.getHeight()/2) - y1, (a + 10)*2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               
                    g.setColor(Color.MAGENTA);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a-1) * (1/element.scaleToBiggest()) / 2  - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a) * (1/element.scaleToBiggest()) / 2  - polozenieY );
                    g.drawLine((a-1)*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y1, a*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               }
                   
                   
                   
                   
                   
            }
            else if (jRadioButton2.isSelected()){
                       
                        Triangle element = new Triangle(temp);
                        element.generateTriangle(freq); 
                        element.triangleTransformation(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()), 
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()), 
                                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
                  
                        double y3;
                        y3 =   0.45 * jPanel1.getHeight() * (1/element.scaleToBiggest())/2 ;
                        int temp_os_y = (int)(element.scaleToBiggest() -((element.scaleToBiggest())%4));
                        g.setColor(Color.red);
                        for (int i=1; i<6; i++){
                            if(element.scaleToBiggest()<5){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)(Math.round(i*y3+1)));
                            g.drawString(Integer.toString(i), 4, (jPanel1.getHeight()/4) - (int)Math.round(i*y3-4));
                            }
                            if(element.scaleToBiggest()>=5 ){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)Math.round(i*y3*temp_os_y/4+1));
                            g.drawString(Integer.toString(i*(temp_os_y/4)), 24, (int)Math.round((jPanel1.getHeight()/4) - i*y3*temp_os_y/4 + 3)+2);
                            }
                        }
                        
                        g.setColor(new Color(0.3f, 0.7f, 0.2f));
                        
                        for (int a=1; a <= temp - 1; a++){
                           y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a-1)*(1/element.scaleToBiggest())/4 );
                            y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a)*(1/element.scaleToBiggest())/4 );
                            g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                            if(jCheckBoxAnimacja.isSelected())
                                animuj.Animacja();
                        }
                   
                   
                    
                   for (int a=1; a <= temp - 1; a++){
                        g.setColor(Color.BLUE);
                        y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/4);
                        y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/4 );
                        g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                        if(jCheckBoxAnimacja.isSelected())
                            animuj.Animacja();
                    } 
                 element.triangleOmegaRe(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()));
                 element.triangleOmegaIm(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
               
                for (int a=1; a <= temp - 1; a++){
                    g.setColor(Color.RED);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/2 - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/2 - polozenieY);
                    g.drawLine((a-1 + 10)*2, (jPanel1.getHeight()/2) - y1, (a + 10)*2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               
                    g.setColor(Color.MAGENTA);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a-1) * (1/element.scaleToBiggest()) / 2  - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a) * (1/element.scaleToBiggest()) / 2  - polozenieY );
                    g.drawLine((a-1)*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y1, a*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               }   
                   
                   
                   
                   
                   
            }
            else if(jRadioButton3.isSelected()){
                Square element = new Square(temp);
                element.generateSquare(freq); 
                element.squareTransformation(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
                 
                        double y3;
                        y3 =   0.45 * jPanel1.getHeight() * (1/element.scaleToBiggest())/2 ;
                        int temp_os_y = (int)(element.scaleToBiggest() -((element.scaleToBiggest())%4));
                        g.setColor(Color.red);
                        for (int i=1; i<6; i++){
                            if(element.scaleToBiggest()<5){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)(Math.round(i*y3+1)));
                            g.drawString(Integer.toString(i), 4, (jPanel1.getHeight()/4) - (int)Math.round(i*y3-4));
                            }
                            if(element.scaleToBiggest()>=5 ){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)Math.round(i*y3*temp_os_y/4+1));
                            g.drawString(Integer.toString(i*(temp_os_y/4)), 24, (int)Math.round((jPanel1.getHeight()/4) - i*y3*temp_os_y/4 + 3)+2);
                            }
                        }
                        
                        g.setColor(new Color(0.3f, 0.7f, 0.2f));
                
                for (int a=1; a <= temp - 1; a++){
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a-1)*(1/element.scaleToBiggest())/4 );
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwa.get(a)*(1/element.scaleToBiggest())/4 );
                    g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
                    }
                   
                   
                for (int a=1; a <= temp - 1; a++){
                    g.setColor(Color.BLUE);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/4);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/4 );
                    g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
                    }
                
                
                 element.squareOmegaRe(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()));
                 element.squareOmegaIm(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
               
                for (int a=1; a <= temp - 1; a++){
                    g.setColor(Color.RED);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/2 - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/2 - polozenieY);
                    g.drawLine((a-1 + 10)*2, (jPanel1.getHeight()/2) - y1, (a + 10)*2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               
                    g.setColor(Color.MAGENTA);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a-1) * (1/element.scaleToBiggest()) / 2  - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a) * (1/element.scaleToBiggest()) / 2  - polozenieY );
                    g.drawLine((a-1)*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y1, a*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               }
            }
            else if (jRadioButton4.isSelected()){                
                Pobudzenie element = new Pobudzenie(temp);
                element.generatePobudzenie();
                
                        
                element.pobudzenieTransformation(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));
                
                        double y3;
                        y3 =   0.45 * jPanel1.getHeight() * (1/element.scaleToBiggest())/2 ;
                        int temp_os_y = (int)(element.scaleToBiggest() -((element.scaleToBiggest())%4));
                        g.setColor(Color.red);
                        for (int i=1; i<6; i++){
                            if(element.scaleToBiggest()<5){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)(Math.round(i*y3+1)));
                            g.drawString(Integer.toString(i), 4, (jPanel1.getHeight()/4) - (int)Math.round(i*y3-4));
                            }
                            if(element.scaleToBiggest()>=5 ){
                            g.drawString("_", 15, (jPanel1.getHeight()/4) - (int)Math.round(i*y3*temp_os_y/4+1));
                            g.drawString(Integer.toString(i*(temp_os_y/4)), 24, (int)Math.round((jPanel1.getHeight()/4) - i*y3*temp_os_y/4 + 3)+2);
                            }
                        }
                        
                        g.setColor(new Color(0.3f, 0.7f, 0.2f));
                
                 for (int a=1; a <= temp - 1; a++){
                        y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * (1/element.scaleToBiggest())/2 );
                        g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y1);
                        if(jCheckBoxAnimacja.isSelected())
                            animuj.Animacja();
                }
                 
                 
                for (int a=1; a <= temp - 1; a++){
                    g.setColor(Color.BLUE);
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.scaleToBiggest())/2);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.scaleToBiggest())/2 );
                    g.drawLine(a-1 + 20, (jPanel1.getHeight()/4) - y1, a + 20, (jPanel1.getHeight()/4) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
                }
                 element.pobudzenieOmegaRe(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()));
                 element.pobudzenieOmegaIm(Double.parseDouble(a0Param.getText()), Double.parseDouble(a1Param.getText()),
                                        Double.parseDouble(b0Param.getText()), Double.parseDouble(b1Param.getText()),
                                        Double.parseDouble(b2Param.getText()), Integer.parseInt(delay.getText()));    
         for(double i = -element.maxValue2 - 20;i <= element.maxValue2+20; i = i + 20){   //Rysowani pionowych lini dla
                    g.setColor(Color.BLACK);                                            //Amplitudowego
                    int t = (int) Math.round(i);
                  
                        g.drawString("- " + Integer.toString(t), 20, jPanel1.getHeight()/2 - t*13/10*60/(int)element.maxValue2 + polozenieY);                                    //oraz oznaczenie "0"    
                        g.setColor(Color.LIGHT_GRAY); 
                        g.drawLine(25, jPanel1.getHeight()/2 - t*13/10*60/(int)element.maxValue2 + polozenieY,
                                   jPanel1.getWidth()/2, jPanel1.getHeight()/2 - t*13/10*60/(int)element.maxValue2 + polozenieY);                 
         }
         
         for(double d = -element.maxValue;d <= element.maxValue; d = d + element.maxValue/6){    //Rysowani pionowych lini dla
                    g.setColor(Color.BLACK);                                                     //Fazowego
                   int i = (int) Math.round(d);
                    g.drawString("_ " + Integer.toString(i), jPanel1.getWidth()/2-2, jPanel1.getHeight()/2 - i*26/30*180/(int)element.maxValue + polozenieY);                                    //oraz oznaczenie "0"     
         
          g.setColor(Color.LIGHT_GRAY); 
                        g.drawLine(jPanel1.getWidth()/2+5, jPanel1.getHeight()/2 - i*26/30*180/(int)element.maxValue + polozenieY,
                           jPanel1.getWidth(), jPanel1.getHeight()/2 - i*26/30*180/(int)element.maxValue + polozenieY);

         }
         
         
                for (int a=1; a <= temp - 1; a++){           
                    g.setColor(Color.RED);      //Wykres amplitudowy
                    
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a-1)*(1/element.maxValue2)*13/40 - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * element.jakasNazwaT.get(a)*(1/element.maxValue2)*13/40 - polozenieY);
                    g.drawLine((a-1 + 10)*2, (jPanel1.getHeight()/2) - y1, (a + 10)*2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               
                    g.setColor(Color.MAGENTA);  //Wykres fazowy
                    y1 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a-1) / element.scaleToBiggest() / 2 - polozenieY);
                    y2 = (int) Math.round( 0.45 * jPanel1.getHeight() * 
                            element.jakasNazwaT2.get(a) / element.scaleToBiggest() / 2  - polozenieY );
                    g.drawLine((a-1)*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y1, a*2 + jPanel1.getWidth()/2, (jPanel1.getHeight()/2) - y2);
                    if(jCheckBoxAnimacja.isSelected())
                        animuj.Animacja();
               }
                
            }
        }
     catch(Exception e){
     }       
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void b2ParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_b2ParamActionPerformed

    private void a0ParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a0ParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a0ParamActionPerformed

    private void a1ParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a1ParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a1ParamActionPerformed

    private void b1ParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_b1ParamActionPerformed

    private void jRadioButton4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton4StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton4StateChanged

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed

    
    }//GEN-LAST:event_jButton1MousePressed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {     
                new Window().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField a0Param;
    private javax.swing.JTextField a1Param;
    private javax.swing.JTextField b0Param;
    private javax.swing.JTextField b1Param;
    private javax.swing.JTextField b2Param;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField delay;
    private javax.swing.JTextField frequency;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxAnimacja;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private static volatile javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    // End of variables declaration//GEN-END:variables

}
